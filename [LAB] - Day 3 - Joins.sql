# [LAB - Day 3 - Joins]

USE sakila ;

-- 1. List the number of films per category.
/*
 3 tables required:
 - category (key = category_id): lists the different categories
 - film categoty (keys = film_id + category_id) : lists what cat_id is for what film_id
 - film ( keys = film_id + language_id + original-language_id) : lists the different films, their id, langueage id, etc...
*/

SELECT 
	c.name AS category
    , COUNT(f.film_id) AS number_of_films
FROM category AS c
JOIN film_category AS fc USING (category_id)
JOIN film AS f  USING (film_id)
GROUP BY c.name;


-- 2. Retrieve the store ID, city, and country for each store.
/*
We'll be using 
- store table
- address table
-city table
-country table
*/


SELECT
-- store table --
	store.store_id
-- address table --
    , address.address
-- city table --
    , city.city_id
	, city.city
-- country table --
    , country.country_id
    , country.country
FROM sakila.address AS address
JOIN sakila.store AS store USING (address_id)
JOIN sakila.city AS city USING (city_id)
JOIN sakila.country AS country USING (country_id) ;


-- 3. Calculate the total revenue generated by each store in dollars.

SELECT
-- store table --
	store.store_id
-- payment table -- 
    , SUM(amount) AS total_revenue
FROM store 
JOIN staff USING (address_id) #table intermédiaire reliant les table store et payment
JOIN payment USING (staff_id)
GROUP BY store_id;


-- Other solution
SELECT 
	s.store_id
    , CONCAT(‘$’, FORMAT(SUM(p.amount),2)) AS total_revenue
	FROM store s
INNER JOIN staff st
	USING (store_id)
INNER JOIN rental r
	ON st.staff_id = r.staff_id
INNER JOIN payment p
	ON r.rental_id = p.rental_id
GROUP BY s.store_id;


SELECT *
FROM payment ;


SELECT
    staff.store_id,
    staff.address_id,
    SUM(payment.amount) AS total_revenue
FROM staff
JOIN payment USING (staff_id)
GROUP BY staff.store_id, staff.address_id;



-- 4. Determine the average running time of films for each category.
SELECT
    fc.category_id,
    cat.name AS category_name,
    CONCAT(
		FLOOR(AVG(f.length) / 60), "h ",
        ROUND(AVG(f.length) % 60), "min"
    ) AS avg_duration
FROM film_category AS fc
JOIN film AS f USING (film_id)
JOIN category AS cat USING (category_id) 
GROUP BY fc.category_id
ORDER BY category_name;


-- 5. Identify the film categories with the longest average running time.
SELECT
-- category table--
	cat.category_id,
	cat.name AS category_name,
-- film table --
	CONCAT(
	FLOOR(AVG(film.length) / 60), "h ",
	ROUND(AVG(film.length) % 60), "min"
    ) AS avg_duration
FROM category AS cat 
-- joins 
JOIN film_category AS fc USING (category_id)
JOIN film USING (film_id)
GROUP BY fc.category_id
ORDER BY avg_duration DESC ;




-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT
-- film table--
    f.film_id,
    f.title,
-- rental table--
    COUNT(rent.rental_id) AS rental_count
FROM rental AS rent
JOIN inventory USING (inventory_id)
JOIN film AS f USING (film_id)
GROUP BY film_id, title
HAVING rental_count >= 31
ORDER BY rental_count DESC, title;


-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.



-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT DISTINCT film.title,
    CASE
        WHEN COUNT(inventory.film_id) > 0 THEN "Available"
        ELSE "NOT Available"
    END AS rent_availability
FROM film
LEFT JOIN inventory ON film.film_id = inventory.film_id
GROUP BY film.title;


-- CHECK for the 42 values

SELECT *,
       total_count
FROM (
    SELECT DISTINCT film.title,
           CASE
               WHEN COUNT(inventory.film_id) > 0 THEN 'Available'
               ELSE 'NOT Available'
           END AS rent_availability,
           COUNT(*) OVER() AS total_count
    FROM film
    LEFT JOIN inventory ON film.film_id = inventory.film_id
    GROUP BY film.title
) AS a